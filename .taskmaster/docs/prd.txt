# Overview  
morinakit은 일상생활에서 자주 사용되는 유틸리티 도구들을 한 곳에 모아놓은 웹 플랫폼입니다. 20~40대의 직장인, 콘텐츠 제작자, 프리랜서, 블로그 운영자들이 반복적인 작업을 빠르게 해결하고 생활 속의 고민을 효율적으로 처리할 수 있도록 도와줍니다. 복잡한 설치나 회원가입 없이 누구나 쉽게 접근하여 사용할 수 있는 직관적인 인터페이스를 제공합니다.

# Core Features  

## 🕒 날짜/시간 관련 도구
- **날짜 계산기**: 특정 날짜로부터 며칠 뒤 또는 며칠 전의 날짜를 계산
- **D-Day 계산기**: 중요한 일정까지의 남은 시간을 실시간으로 카운트다운
- **요일 계산기**: 과거나 미래의 특정 날짜가 무슨 요일인지 계산
- **만 나이 계산기**: 생년월일을 입력하면 정확한 만 나이를 계산

## 📹 유튜브/영상 도구
- **유튜브 썸네일 추출기**: 유튜브 URL을 입력하면 다양한 해상도의 썸네일 이미지를 추출하여 다운로드 제공

## 📄 텍스트 도구
- **대소문자 변환기**: 텍스트의 대소문자를 다양한 방식으로 변환 (전체 대문자, 전체 소문자, 첫 글자만 대문자 등)
- **단어 수/문자 수 세기**: 입력된 텍스트의 단어 수, 문자 수, 공백 포함/제외 문자 수를 실시간으로 계산

## 🖼 이미지/파일 도구
- **QR 코드 생성기**: 텍스트나 URL을 입력하면 QR 코드를 생성하고 다운로드 가능

## 🎲 재미/랜덤 도구
- **랜덤 이름 생성기**: 다양한 카테고리의 랜덤 이름을 생성 (한국어, 영어, 닉네임 등)

# User Experience  

## 사용자 페르소나
- **직장인 김민수(32세)**: 업무 효율성을 중시하며, 빠른 계산이나 변환 작업이 필요한 사람
- **콘텐츠 제작자 이지은(28세)**: 유튜브, 블로그 운영하며 썸네일, QR코드 등의 소재가 자주 필요한 사람
- **프리랜서 박현우(35세)**: 다양한 클라이언트 작업을 위해 텍스트 변환, 날짜 계산 등이 필요한 사람

## 핵심 사용자 플로우
1. **메인 페이지 접속** → 카테고리별로 정리된 도구 목록 확인
2. **도구 선택** → 원하는 유틸리티 도구 클릭
3. **데이터 입력** → 필요한 정보 입력 (URL, 텍스트, 날짜 등)
4. **결과 확인** → 즉시 결과 표시 및 다운로드/복사 기능 제공
5. **재사용** → 다른 도구로 쉽게 이동하거나 같은 도구 재사용

## UI/UX 고려사항
- **반응형 디자인**: 모바일, 태블릿, 데스크톱 모든 환경에서 최적화
- **직관적인 아이콘**: 각 도구의 기능을 한눈에 알 수 있는 아이콘 사용
- **빠른 로딩**: 모든 도구가 즉시 사용 가능하도록 최적화
- **결과 공유**: 계산 결과를 쉽게 복사하거나 공유할 수 있는 기능

# Technical Architecture  

## 시스템 컴포넌트
- **프론트엔드**: Vue.js 3 (Composition API) + TypeScript
- **UI 프레임워크**: Tailwind CSS 또는 Vuetify
- **빌드 도구**: Vite
- **호스팅**: Vercel 또는 Netlify (정적 사이트)

## 데이터 모델
- 대부분의 도구는 클라이언트 사이드에서 처리
- 사용자 데이터는 로컬 스토리지에만 임시 저장
- 개인정보 수집 최소화

## APIs and 통합
- **유튜브 API**: 썸네일 추출을 위한 YouTube Data API 또는 직접 URL 파싱
- **QR 코드 라이브러리**: qrcode.js 또는 유사한 클라이언트 사이드 라이브러리

## 인프라 요구사항
- **CDN**: 빠른 전세계 접근을 위한 CDN 구성
- **도메인**: 기억하기 쉬운 도메인명
- **SSL**: HTTPS 보안 연결
- **SEO**: 검색 엔진 최적화를 위한 메타 태그 및 구조화된 데이터

# Development Roadmap  

## Phase 1: MVP (최소 실행 가능 제품)
- 기본 레이아웃 및 네비게이션 구성
- 날짜 계산기 (기본 날짜 계산 기능)
- 대소문자 변환기
- 단어/문자 수 세기
- 반응형 디자인 기본 구현

## Phase 2: 핵심 기능 확장
- D-Day 계산기
- 요일 계산기
- 만 나이 계산기
- QR 코드 생성기
- 유튜브 썸네일 추출기

## Phase 3: 고도화 및 추가 기능
- 랜덤 이름 생성기
- 사용자 경험 개선 (애니메이션, 피드백)
- 다크모드 지원
- 즐겨찾기 기능

## Phase 4: 최적화 및 확장
- 성능 최적화
- SEO 개선
- 추가 유틸리티 도구 개발
- 사용자 피드백 기반 개선

# Logical Dependency Chain

## 기초 설정 (Foundation)
1. **프로젝트 초기 설정**: Vue.js 프로젝트 생성, TypeScript 설정
2. **기본 레이아웃**: 헤더, 푸터, 메인 컨테이너 구조
3. **라우팅 설정**: Vue Router를 통한 페이지 간 이동
4. **스타일링 시스템**: Tailwind CSS 또는 UI 프레임워크 적용

## 핵심 기능 개발 (빠른 시각적 결과 중심)
1. **홈페이지**: 도구 목록을 카드 형태로 표시하는 메인 페이지
2. **텍스트 도구 먼저**: 즉시 결과를 볼 수 있는 대소문자 변환기, 문자 수 세기
3. **날짜 도구**: 날짜 계산기부터 시작하여 점진적으로 확장
4. **미디어 도구**: 유튜브 썸네일 추출기, QR 코드 생성기

## 점진적 개선
- 각 도구별로 기본 기능 → 고급 기능 → 사용자 경험 개선 순서
- 반응형 디자인을 처음부터 고려하여 개발
- 컴포넌트 재사용성을 높여 개발 속도 향상

# Risks and Mitigations  

## 기술적 도전과제
- **Risk**: 유튜브 썸네일 추출 시 CORS 문제
- **Mitigation**: 프록시 서버 구축 또는 클라이언트 사이드 URL 파싱 방식 사용

- **Risk**: 다양한 브라우저 호환성 문제
- **Mitigation**: 주요 브라우저 테스트 및 폴리필 적용

## MVP 범위 설정
- **Risk**: 기능 과다로 인한 개발 지연
- **Mitigation**: 핵심 4-5개 도구로 MVP 범위 제한, 단계적 확장

- **Risk**: 사용자 인터페이스 복잡성
- **Mitigation**: 각 도구를 별도 페이지로 분리, 직관적인 네비게이션

## 리소스 제약
- **Risk**: 외부 API 의존성 및 비용
- **Mitigation**: 대부분 기능을 클라이언트 사이드에서 처리하여 서버 비용 최소화

- **Risk**: 성능 최적화 필요성
- **Mitigation**: 번들 사이즈 최적화, 레이지 로딩 적용

# Appendix  

## 기술 스택 상세
- **Frontend Framework**: Vue.js 3 (Composition API)
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **Build Tool**: Vite
- **Testing**: Vitest + Vue Test Utils
- **Deployment**: Vercel/Netlify

## 참고 사이트
- 기존 유사 서비스 분석을 통한 UI/UX 벤치마킹
- 사용자 피드백 수집을 위한 간단한 피드백 시스템 구축 고려

## 성능 목표
- **First Contentful Paint**: 1.5초 이내
- **Time to Interactive**: 3초 이내
- **모바일 최적화**: 모든 기능이 터치 인터페이스에서 원활하게 작동 